{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrin\\\\OneDrive\\\\Desktop\\\\Todo\\\\tasks-app\\\\src\\\\components\\\\Utilities\\\\ModalDirectory.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useAppSelector } from \"../../store/hooks\";\nimport Modal from \"./Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalDirectory = _ref => {\n  _s();\n  let {\n    onClose,\n    dirName,\n    onConfirm,\n    btnText,\n    title\n  } = _ref;\n  const directories = useAppSelector(store => store.tasks.directories);\n  const [errorDirectoryName, setErrorDirectoryName] = useState(false);\n  const [newDirName, setNewDirName] = useState(dirName ? dirName : \"\");\n  const checkDirNameExists = val => {\n    const directoryDoesNotExist = directories.every(dir => dir !== val);\n    if (directoryDoesNotExist || dirName === val) {\n      setErrorDirectoryName(false);\n    } else {\n      setErrorDirectoryName(true);\n    }\n  };\n  const confirmDirNameHandler = e => {\n    e.preventDefault();\n    if (errorDirectoryName) return;\n    onConfirm(newDirName);\n    onClose();\n  };\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    onClose: onClose,\n    title: title,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"stylesInputsField\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"dir-name\",\n          className: \"\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"dir-name\",\n          placeholder: \"Enter a directory name\",\n          value: newDirName,\n          onChange: _ref2 => {\n            let {\n              target\n            } = _ref2;\n            return setNewDirName(target.value);\n          },\n          className: `inputStyles block w-full`,\n          onInput: _ref3 => {\n            let {\n              currentTarget\n            } = _ref3;\n            return checkDirNameExists(currentTarget.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), errorDirectoryName && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\",\n          children: \"Directory name already exists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn mt-6\",\n        onClick: confirmDirNameHandler,\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(ModalDirectory, \"GS/xpO8m3XODiRSShhF1L3KC4yY=\", false, function () {\n  return [useAppSelector];\n});\n_c = ModalDirectory;\nexport default ModalDirectory;\nvar _c;\n$RefreshReg$(_c, \"ModalDirectory\");","map":{"version":3,"names":["React","useState","useAppSelector","Modal","ModalDirectory","onClose","dirName","onConfirm","btnText","title","directories","store","tasks","errorDirectoryName","setErrorDirectoryName","newDirName","setNewDirName","checkDirNameExists","val","directoryDoesNotExist","every","dir","confirmDirNameHandler","e","preventDefault","target","value","currentTarget"],"sources":["C:/Users/shrin/OneDrive/Desktop/Todo/tasks-app/src/components/Utilities/ModalDirectory.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useAppSelector } from \"../../store/hooks\";\r\nimport Modal from \"./Modal\";\r\n\r\nconst ModalDirectory: React.FC<{\r\n  onClose: () => void;\r\n  dirName?: string;\r\n  onConfirm: (newDirName: string) => void;\r\n  btnText: string;\r\n  title: string;\r\n}> = ({ onClose, dirName, onConfirm, btnText, title }) => {\r\n  const directories = useAppSelector((store) => store.tasks.directories);\r\n\r\n  const [errorDirectoryName, setErrorDirectoryName] = useState<boolean>(false);\r\n  const [newDirName, setNewDirName] = useState<string>(dirName ? dirName : \"\");\r\n\r\n  const checkDirNameExists = (val: string) => {\r\n    const directoryDoesNotExist = directories.every(\r\n      (dir: string) => dir !== val\r\n    );\r\n\r\n    if (directoryDoesNotExist || dirName === val) {\r\n      setErrorDirectoryName(false);\r\n    } else {\r\n      setErrorDirectoryName(true);\r\n    }\r\n  };\r\n\r\n  const confirmDirNameHandler = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    if (errorDirectoryName) return;\r\n    onConfirm(newDirName);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal onClose={onClose} title={title}>\r\n      <form className=\"stylesInputsField\">\r\n        <div className=\"relative\">\r\n          <label htmlFor=\"dir-name\" className=\"\">\r\n            Title\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"dir-name\"\r\n            placeholder=\"Enter a directory name\"\r\n            value={newDirName}\r\n            onChange={({ target }) => setNewDirName(target.value)}\r\n            className={`inputStyles block w-full`}\r\n            onInput={({ currentTarget }) =>\r\n              checkDirNameExists(currentTarget.value)\r\n            }\r\n          />\r\n          {errorDirectoryName && (\r\n            <div className=\"absolute bg-rose-500 text-slate-200 rounded-md p-2 top-full text-sm w-full font-medium z-20\">\r\n              Directory name already exists\r\n            </div>\r\n          )}\r\n        </div>\r\n        <button className=\"btn mt-6\" onClick={confirmDirNameHandler}>\r\n          {btnText}\r\n        </button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalDirectory;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,KAAK,MAAM,SAAS;AAAC;AAE5B,MAAMC,cAMJ,GAAG,QAAqD;EAAA;EAAA,IAApD;IAAEC,OAAO;IAAEC,OAAO;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAM,CAAC;EACnD,MAAMC,WAAW,GAAGR,cAAc,CAAES,KAAK,IAAKA,KAAK,CAACC,KAAK,CAACF,WAAW,CAAC;EAEtE,MAAM,CAACG,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAU,KAAK,CAAC;EAC5E,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAASK,OAAO,GAAGA,OAAO,GAAG,EAAE,CAAC;EAE5E,MAAMW,kBAAkB,GAAIC,GAAW,IAAK;IAC1C,MAAMC,qBAAqB,GAAGT,WAAW,CAACU,KAAK,CAC5CC,GAAW,IAAKA,GAAG,KAAKH,GAAG,CAC7B;IAED,IAAIC,qBAAqB,IAAIb,OAAO,KAAKY,GAAG,EAAE;MAC5CJ,qBAAqB,CAAC,KAAK,CAAC;IAC9B,CAAC,MAAM;MACLA,qBAAqB,CAAC,IAAI,CAAC;IAC7B;EACF,CAAC;EAED,MAAMQ,qBAAqB,GAAIC,CAAmB,IAAK;IACrDA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIX,kBAAkB,EAAE;IACxBN,SAAS,CAACQ,UAAU,CAAC;IACrBV,OAAO,EAAE;EACX,CAAC;EAED,oBACE,QAAC,KAAK;IAAC,OAAO,EAAEA,OAAQ;IAAC,KAAK,EAAEI,KAAM;IAAA,uBACpC;MAAM,SAAS,EAAC,mBAAmB;MAAA,wBACjC;QAAK,SAAS,EAAC,UAAU;QAAA,wBACvB;UAAO,OAAO,EAAC,UAAU;UAAC,SAAS,EAAC,EAAE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAE9B,eACR;UACE,IAAI,EAAC,MAAM;UACX,EAAE,EAAC,UAAU;UACb,WAAW,EAAC,wBAAwB;UACpC,KAAK,EAAEM,UAAW;UAClB,QAAQ,EAAE;YAAA,IAAC;cAAEU;YAAO,CAAC;YAAA,OAAKT,aAAa,CAACS,MAAM,CAACC,KAAK,CAAC;UAAA,CAAC;UACtD,SAAS,EAAG,0BAA0B;UACtC,OAAO,EAAE;YAAA,IAAC;cAAEC;YAAc,CAAC;YAAA,OACzBV,kBAAkB,CAACU,aAAa,CAACD,KAAK,CAAC;UAAA;QACxC;UAAA;UAAA;UAAA;QAAA,QACD,EACDb,kBAAkB,iBACjB;UAAK,SAAS,EAAC,6FAA6F;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAG7G;MAAA;QAAA;QAAA;QAAA;MAAA,QACG,eACN;QAAQ,SAAS,EAAC,UAAU;QAAC,OAAO,EAAES,qBAAsB;QAAA,UACzDd;MAAO;QAAA;QAAA;QAAA;MAAA,QACD;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACD;AAEZ,CAAC;AAAC,GA7DIJ,cAMJ;EAAA,QACoBF,cAAc;AAAA;AAAA,KAP9BE,cAMJ;AAyDF,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}