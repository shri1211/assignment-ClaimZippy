{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst useSortTasks = tasks => {\n  _s();\n  const [sortedBy, setSortedBy] = useState(\"\");\n  const [sortedTasks, setSortedTasks] = useState(tasks);\n  useEffect(() => {\n    const sortByDate = order => {\n      const toMillisseconds = date => Date.parse(date);\n      const tasksCopy = [...tasks];\n      const sorted = tasksCopy.sort((task1, task2) => {\n        const date1 = toMillisseconds(task1.date);\n        const date2 = toMillisseconds(task2.date);\n        if (date1 < date2) {\n          return -1;\n        }\n        if (date1 > date2) {\n          return 1;\n        }\n        return 0;\n      });\n      if (order === \"min-date\") {\n        return sorted;\n      }\n      if (order === \"max-date\") {\n        return sorted.reverse();\n      }\n      return tasks; //se n達o existir tasks (para n達o retornar undefined)\n    };\n\n    const sortByCompletedStatus = completed => {\n      const tasksCopy = [...tasks];\n      const sorted = tasksCopy.sort(task1 => {\n        if (task1.completed) {\n          return -1;\n        }\n        return 0;\n      });\n      if (completed) {\n        return sorted;\n      }\n      if (!completed) {\n        return sorted.reverse();\n      }\n      return tasks;\n    };\n    if (sortedBy === \"min-date\" || sortedBy === \"max-date\") {\n      setSortedTasks(sortByDate(sortedBy));\n    }\n    if (sortedBy === \"\" || sortedBy === \"order-added\") {\n      setSortedTasks(tasks);\n    }\n    if (sortedBy === \"completed-first\") {\n      setSortedTasks(sortByCompletedStatus(true));\n    }\n    if (sortedBy === \"uncompleted-first\") {\n      setSortedTasks(sortByCompletedStatus(false));\n    }\n  }, [sortedBy, tasks]);\n  return {\n    sortedBy,\n    setSortedBy,\n    sortedTasks\n  };\n};\n_s(useSortTasks, \"7NAV0cBwirKTnHXlnNvI/g1df1c=\");\nexport default useSortTasks;","map":{"version":3,"names":["useState","useEffect","useSortTasks","tasks","sortedBy","setSortedBy","sortedTasks","setSortedTasks","sortByDate","order","toMillisseconds","date","Date","parse","tasksCopy","sorted","sort","task1","task2","date1","date2","reverse","sortByCompletedStatus","completed"],"sources":["C:/Users/shrin/OneDrive/Desktop/New folder/tasks-app/src/components/hooks/useSortTasks.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Task } from \"../../interfaces\";\r\n\r\nconst useSortTasks = (tasks: Task[]) => {\r\n  const [sortedBy, setSortedBy] = useState<string>(\"\");\r\n\r\n  const [sortedTasks, setSortedTasks] = useState<Task[]>(tasks);\r\n\r\n  useEffect(() => {\r\n    const sortByDate = (order: \"max-date\" | \"min-date\"): Task[] => {\r\n      const toMillisseconds = (date: string) => Date.parse(date);\r\n      const tasksCopy = [...tasks];\r\n      const sorted = tasksCopy.sort((task1, task2) => {\r\n        const date1 = toMillisseconds(task1.date);\r\n        const date2 = toMillisseconds(task2.date);\r\n\r\n        if (date1 < date2) {\r\n          return -1;\r\n        }\r\n\r\n        if (date1 > date2) {\r\n          return 1;\r\n        }\r\n\r\n        return 0;\r\n      });\r\n\r\n      if (order === \"min-date\") {\r\n        return sorted;\r\n      }\r\n\r\n      if (order === \"max-date\") {\r\n        return sorted.reverse();\r\n      }\r\n\r\n      return tasks; //se n達o existir tasks (para n達o retornar undefined)\r\n    };\r\n\r\n    const sortByCompletedStatus = (completed: boolean): Task[] => {\r\n      const tasksCopy = [...tasks];\r\n      const sorted = tasksCopy.sort((task1) => {\r\n        if (task1.completed) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      if (completed) {\r\n        return sorted;\r\n      }\r\n      if (!completed) {\r\n        return sorted.reverse();\r\n      }\r\n      return tasks;\r\n    };\r\n\r\n    if (sortedBy === \"min-date\" || sortedBy === \"max-date\") {\r\n      setSortedTasks(sortByDate(sortedBy));\r\n    }\r\n    if (sortedBy === \"\" || sortedBy === \"order-added\") {\r\n      setSortedTasks(tasks);\r\n    }\r\n    if (sortedBy === \"completed-first\") {\r\n      setSortedTasks(sortByCompletedStatus(true));\r\n    }\r\n    if (sortedBy === \"uncompleted-first\") {\r\n      setSortedTasks(sortByCompletedStatus(false));\r\n    }\r\n  }, [sortedBy, tasks]);\r\n  return { sortedBy, setSortedBy, sortedTasks };\r\n};\r\n\r\nexport default useSortTasks;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAG3C,MAAMC,YAAY,GAAIC,KAAa,IAAK;EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAS,EAAE,CAAC;EAEpD,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAASG,KAAK,CAAC;EAE7DF,SAAS,CAAC,MAAM;IACd,MAAMO,UAAU,GAAIC,KAA8B,IAAa;MAC7D,MAAMC,eAAe,GAAIC,IAAY,IAAKC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC;MAC1D,MAAMG,SAAS,GAAG,CAAC,GAAGX,KAAK,CAAC;MAC5B,MAAMY,MAAM,GAAGD,SAAS,CAACE,IAAI,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC9C,MAAMC,KAAK,GAAGT,eAAe,CAACO,KAAK,CAACN,IAAI,CAAC;QACzC,MAAMS,KAAK,GAAGV,eAAe,CAACQ,KAAK,CAACP,IAAI,CAAC;QAEzC,IAAIQ,KAAK,GAAGC,KAAK,EAAE;UACjB,OAAO,CAAC,CAAC;QACX;QAEA,IAAID,KAAK,GAAGC,KAAK,EAAE;UACjB,OAAO,CAAC;QACV;QAEA,OAAO,CAAC;MACV,CAAC,CAAC;MAEF,IAAIX,KAAK,KAAK,UAAU,EAAE;QACxB,OAAOM,MAAM;MACf;MAEA,IAAIN,KAAK,KAAK,UAAU,EAAE;QACxB,OAAOM,MAAM,CAACM,OAAO,EAAE;MACzB;MAEA,OAAOlB,KAAK,CAAC,CAAC;IAChB,CAAC;;IAED,MAAMmB,qBAAqB,GAAIC,SAAkB,IAAa;MAC5D,MAAMT,SAAS,GAAG,CAAC,GAAGX,KAAK,CAAC;MAC5B,MAAMY,MAAM,GAAGD,SAAS,CAACE,IAAI,CAAEC,KAAK,IAAK;QACvC,IAAIA,KAAK,CAACM,SAAS,EAAE;UACnB,OAAO,CAAC,CAAC;QACX;QACA,OAAO,CAAC;MACV,CAAC,CAAC;MACF,IAAIA,SAAS,EAAE;QACb,OAAOR,MAAM;MACf;MACA,IAAI,CAACQ,SAAS,EAAE;QACd,OAAOR,MAAM,CAACM,OAAO,EAAE;MACzB;MACA,OAAOlB,KAAK;IACd,CAAC;IAED,IAAIC,QAAQ,KAAK,UAAU,IAAIA,QAAQ,KAAK,UAAU,EAAE;MACtDG,cAAc,CAACC,UAAU,CAACJ,QAAQ,CAAC,CAAC;IACtC;IACA,IAAIA,QAAQ,KAAK,EAAE,IAAIA,QAAQ,KAAK,aAAa,EAAE;MACjDG,cAAc,CAACJ,KAAK,CAAC;IACvB;IACA,IAAIC,QAAQ,KAAK,iBAAiB,EAAE;MAClCG,cAAc,CAACe,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC7C;IACA,IAAIlB,QAAQ,KAAK,mBAAmB,EAAE;MACpCG,cAAc,CAACe,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAC9C;EACF,CAAC,EAAE,CAAClB,QAAQ,EAAED,KAAK,CAAC,CAAC;EACrB,OAAO;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAY,CAAC;AAC/C,CAAC;AAAC,GAlEIJ,YAAY;AAoElB,eAAeA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}