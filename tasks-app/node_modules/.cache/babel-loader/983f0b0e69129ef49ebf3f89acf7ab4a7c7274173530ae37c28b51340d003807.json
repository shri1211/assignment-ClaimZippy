{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shrin\\\\OneDrive\\\\Desktop\\\\Todo\\\\tasks-app\\\\src\\\\components\\\\TasksSection\\\\ButtonsSort.tsx\";\nimport React from \"react\";\nimport { ReactComponent as IconView1 } from \"../../assets/view-1.svg\";\nimport { ReactComponent as IconView2 } from \"../../assets/view-2.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortValues = [{\n  value: \"order-added\",\n  title: \"Order added\"\n}, {\n  value: \"min-date\",\n  title: \"Earlier first\"\n}, {\n  value: \"max-date\",\n  title: \"Later first\"\n}, {\n  value: \"completed-first\",\n  title: \"Completed first\"\n}, {\n  value: \"uncompleted-first\",\n  title: \"Uncompleted first\"\n}];\nconst ButtonsSort = _ref => {\n  let {\n    isListInView1,\n    setIsListInView1,\n    sortedBy,\n    setSortedBy\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex children-styles\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsListInView1(true),\n      title: \"view in list\",\n      children: /*#__PURE__*/_jsxDEV(IconView1, {\n        className: isListInView1 ? \"text-violet-600\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsListInView1(false),\n      title: \"view in grid\",\n      children: /*#__PURE__*/_jsxDEV(IconView2, {\n        className: !isListInView1 ? \"text-gray-600\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_c = ButtonsSort;\nexport default ButtonsSort;\nvar _c;\n$RefreshReg$(_c, \"ButtonsSort\");","map":{"version":3,"names":["React","ReactComponent","IconView1","IconView2","sortValues","value","title","ButtonsSort","isListInView1","setIsListInView1","sortedBy","setSortedBy"],"sources":["C:/Users/shrin/OneDrive/Desktop/Todo/tasks-app/src/components/TasksSection/ButtonsSort.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { ReactComponent as IconView1 } from \"../../assets/view-1.svg\";\r\nimport { ReactComponent as IconView2 } from \"../../assets/view-2.svg\";\r\n\r\nconst sortValues = [\r\n  { value: \"order-added\", title: \"Order added\" },\r\n  { value: \"min-date\", title: \"Earlier first\" },\r\n  { value: \"max-date\", title: \"Later first\" },\r\n  { value: \"completed-first\", title: \"Completed first\" },\r\n  { value: \"uncompleted-first\", title: \"Uncompleted first\" },\r\n];\r\n\r\nconst ButtonsSort: React.FC<{\r\n  isListInView1: boolean;\r\n  sortedBy: string;\r\n  setSortedBy: (option: string) => void;\r\n  setIsListInView1: (status: boolean) => void;\r\n}> = ({ isListInView1, setIsListInView1, sortedBy, setSortedBy }) => {\r\n  return (\r\n    <div className=\"flex children-styles\">\r\n      <button onClick={() => setIsListInView1(true)} title=\"view in list\">\r\n        <IconView1 className={isListInView1 ? \"text-violet-600\" : \"\"} />\r\n      </button>\r\n      <button onClick={() => setIsListInView1(false)} title=\"view in grid\">\r\n        <IconView2 className={!isListInView1 ? \"text-gray-600\" : \"\"} />\r\n      </button> \r\n      {/* <select\r\n        className=\"ml-auto inputStyles\"\r\n        value={sortedBy}\r\n        onChange={({ target }) => setSortedBy(target.value)}\r\n      >\r\n        <option value=\"\" disabled>\r\n          Sort by\r\n        </option>\r\n        {sortValues.map((val) => (\r\n          <option\r\n            key={val.value}\r\n            value={val.value}\r\n            className=\"bg-slate-100 dark:bg-slate-800\"\r\n          >\r\n            {val.title}\r\n          </option>\r\n        ))}\r\n      </select> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonsSort;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,IAAIC,SAAS,QAAQ,yBAAyB;AACrE,SAASD,cAAc,IAAIE,SAAS,QAAQ,yBAAyB;AAAC;AAEtE,MAAMC,UAAU,GAAG,CACjB;EAAEC,KAAK,EAAE,aAAa;EAAEC,KAAK,EAAE;AAAc,CAAC,EAC9C;EAAED,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAgB,CAAC,EAC7C;EAAED,KAAK,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAc,CAAC,EAC3C;EAAED,KAAK,EAAE,iBAAiB;EAAEC,KAAK,EAAE;AAAkB,CAAC,EACtD;EAAED,KAAK,EAAE,mBAAmB;EAAEC,KAAK,EAAE;AAAoB,CAAC,CAC3D;AAED,MAAMC,WAKJ,GAAG,QAAgE;EAAA,IAA/D;IAAEC,aAAa;IAAEC,gBAAgB;IAAEC,QAAQ;IAAEC;EAAY,CAAC;EAC9D,oBACE;IAAK,SAAS,EAAC,sBAAsB;IAAA,wBACnC;MAAQ,OAAO,EAAE,MAAMF,gBAAgB,CAAC,IAAI,CAAE;MAAC,KAAK,EAAC,cAAc;MAAA,uBACjE,QAAC,SAAS;QAAC,SAAS,EAAED,aAAa,GAAG,iBAAiB,GAAG;MAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACzD,eACT;MAAQ,OAAO,EAAE,MAAMC,gBAAgB,CAAC,KAAK,CAAE;MAAC,KAAK,EAAC,cAAc;MAAA,uBAClE,QAAC,SAAS;QAAC,SAAS,EAAE,CAACD,aAAa,GAAG,eAAe,GAAG;MAAG;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACxD;EAAA;IAAA;IAAA;IAAA;EAAA,QAmBL;AAEV,CAAC;AAAC,KAlCID,WAKJ;AA+BF,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}